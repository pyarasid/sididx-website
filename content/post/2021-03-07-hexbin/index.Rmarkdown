---
title: Part 1- How to create hexbin choropleth map to visualize data?
author: ~
date: '2021-03-07'
slug: hexbin
categories: [Geocomputation, Data Visualization]
tags: [r, ggplot, choropleth, hexagon, geospatial analysis]
subtitle: 'Static and animated map to visualize COVID-19 data for Kenya'
summary: ''
authors: [Siddharth Dixit]
lastmod: '2021-03-07T18:33:24-05:00'
featured: no
image:
  caption: ''
  focal_point: ''
  preview_only: no
projects: []
---
 
Newyork Times, The Economist, Washington Post and many other news outlets often use hexbin maps to convey information in easy, exciting and cool ways. I always wanted to create hexbin maps, and last year i got the opportunity (and data!) to learn and create choropleth hexbin maps to show the progression of COVID-19 cases. 

I am planning to through the whole process in two parts. In this first part part, i will talk about where i got Kenya's shape files, data munging with the shape files data, and creating the hexagonal grid. 

We first start with downloading the shape files for Kenya from the GADM website which is a high-resolution database of country administrative areas. The data is not freely available for use in commercial purposes. The website provide files which can be directly read into R, which makes this website a really handy resource. It has pretty latest shape files for almost all the countries in the worlds. You can find Kenya's shape files from the following GADM link. We will download level-1 shape files, as we are only interested in county level data. Level-2 and level-3 provide more granulated information of Kenya's administrative areas.

https://gadm.org/download_country_v3.html

We will unzip the downloaded folder, and load the shape file in R. We will use "rgdal" library to load the shape file into R. "rgdal" is R's interface to the "Geospatial Abstraction Library (GDAL)" which is used by other open source GIS packages such as QGIS and enables R to handle a broader range of spatial data formats.

```{r, message=FALSE}
library(rgdal)
```

Now, we read the shape file into R.
```{r, message=FALSE, warning=FALSE, results='hide'}
library(here) #this package is just used to refer to the folder where the shape file is kept
original_shapes <- readOGR(dsn = here("./content/post/2021-03-07-hexbin/gadm36_KEN_shp"),  layer = "gadm36_KEN_1")
```
Once we have read the data into R. we will view the shape file data using the head() function. This function shows the first 5 rows of the shape file data.
```{r, message=FALSE}
head(original_shapes@data)
```

On the choropleth hex map of kenya we will like to show the names of each country, but we can't write the full name as this will make the map really chaotic. Therefore, we will abbreviate the names of all the counties, and then populate them on the map. We have created a separate excel file with abbreviations for all counties. You can also google or find these abbreviation on wikipedia. 

We will first read this abbreviation excel, and then add this these abbreviation to the "original_shapes" data. Basically, we we will gradually add all the information that we require to this shape file data to get it ready to be visuaized. 

```{r, message=FALSE}
#loading the required library and reading the CSV file with region abbreviation 
library(readxl)
df_abb <- read_excel(here("./content/post/2021-03-07-hexbin/abb.xlsx"))

#viewing the first 5 rows of the data frame 
head(df_abb)
```

```{r, message=FALSE}
#removing the ABB column from the data frame 
df_abb <- subset(df_abb ,select = -c(ABB))
head(df_abb)
```

Now, we will join the abbreviation data frame with the shape file data frame. The "County" column of "df_abb" data frame and the "Name_1" column of "original_shapes" data have the same information i.e. the name of counties in Kenya. Therefore, we will use these columns to join the two data frames.

```{r, message=FALSE}
#renaming "County" column using the dplyr library, we could also have joined the two data frames without renaming "County" as well
library(dplyr)
df_abb <- df_abb %>% 
  rename(NAME_1=County)

#using left_join() to join the two data frames
original_shapes@data<- left_join(original_shapes@data, df_abb, by=c("NAME_1"="NAME_1"))
head(original_shapes@data)
```

After we have joined the two data frames, we will turn our focus tesselating the map polygons of Kenya into hexagons. Tesselation means covering a flat surface (in this case a map) with one or more geometric shapes which do not overlap and there is no gaps between them.

We will use "geogrid" package in R to algorithmically tessellate kenya's map into hexagonal grids. You can find more information from the following github repository:

https://github.com/jbaileyh/geogrid

We will us calculate_grid() function of "geogrid" library to achieve our goal. This function takes in SpatialPolygonsDataframe or sf object, a learning rate (suggestion = 0.03 to begin), a grid type hexagonal or regular and a seed value. calculate_grid() function uses mathematical algorithm to covert the boundary of the polygons into hexagon shapes, while still trying to preserve the actual shape of the map. Therefore, as we can see there can be many versions of the grids that can be created. The "seed" attribute of calculate_grid() lets us generate different versions of grids. Thus, we should visually inspect each grid, and choose the grid which best captures the actual shape of the map.

Lets first create 6 possible versions of the grid for Kenya's map polygons. You can create more versions and choose from them.

```{r, message=FALSE, warning=FALSE}
library(geogrid)

par(mfrow = c(2, 3), mar = c(0, 0, 2, 0))
for (i in 1:6) {
  new_cells <- calculate_grid(shape = original_shapes, grid_type = "hexagonal", seed = i)
  plot(new_cells, main = paste("Seed", i, sep = " "))
}

```
Seed 6, i feel, best preserves Kenya's map geometry. Therefore, we will choose this seed, and assign this grid to convert Kenya's map into hexbin map.

```{r, message=FALSE, warning=FALSE}
#Grid plot
#we choose grid 6 as it closely matches the actual geometry of kenya
new_cells_reg <- calculate_grid(shape = original_shapes, grid_type = "hexagonal", seed = 6)

#assign_polygons() function assigns the polygon in the original spatial data to their new location based on the calculated grid function and the seed selected
resultreg <- assign_polygons(original_shapes, new_cells_reg)

#plotting Kenya's grid map 
plot(resultreg)
```

I will end this post here as, i think, it already packs in a lot of information for one article In the second part of the tutorial, i will go through the joining of shape file data and the CVOID-19 data for Kenya, and creation of static and animated choropleth hexbin maps to show the progression of COVID-19 cases.
